<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\LWIP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\LWIP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Sep 27 19:13:32 2018
<BR><P>
<H3>Maximum Stack Usage =       1080 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART_CallBack &rArr; receive_str_manage &rArr; mystrncpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC1_2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3]">ADJ_CallBack</a> from task.o(i.ADJ_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[b]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[25]">CAN1_RX0_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[26]">CAN1_RX1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[27]">CAN1_SCE_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[24]">CAN1_TX_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[20]">DMA1_Channel5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[21]">DMA1_Channel6_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[22]">DMA1_Channel7_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[6]">DS1302_CallBack</a> from task.o(i.DS1302_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[e]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from stm32f10x_it.o(i.ETH_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[53]">ETH_link_callback</a> from stm32f4x7_eth_bsp.o(i.ETH_link_callback) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[28]">EXTI9_5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[15]">FLASH_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[31]">I2C1_ER_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[30]">I2C1_EV_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[33]">I2C2_ER_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[32]">I2C2_EV_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2]">KEY_CallBack</a> from task.o(i.KEY_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[4]">LED_CallBack</a> from task.o(i.LED_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[a]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3b]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[12]">PVD_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[16]">RCC_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3a]">RTC_Alarm_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[14]">RTC_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[0]">RunStateLock_CallBack</a> from task.o(i.RunStateLock_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[34]">SPI1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[35]">SPI2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f107xc.o(.text)
 <LI><a href="#[13]">TAMPER_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[29]">TIM1_BRK_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2c]">TIM1_CC_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2b]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2a]">TIM1_UP_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2e]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2f]">TIM4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from usart.o(i.UART5_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[5]">UDBG_CallBack</a> from task.o(i.UDBG_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[36]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[37]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[38]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1]">USART_CallBack</a> from task.o(i.USART_CallBack) referenced 2 times from task.o(.data)
 <LI><a href="#[c]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[50]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f107xc.o(.text)
 <LI><a href="#[54]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[55]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[51]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[52]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from netconf.o(i.LwIP_Init)
 <LI><a href="#[56]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[4e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5a]">netRecvEventCallback</a> from net.o(i.netRecvEventCallback) referenced from net.o(i.netInit)
 <LI><a href="#[5b]">netRecvGeneralCallback</a> from net.o(i.netRecvGeneralCallback) referenced from net.o(i.netInit)
 <LI><a href="#[57]">uart1_call_back</a> from init.o(i.uart1_call_back) referenced from init.o(i.main_com_init)
 <LI><a href="#[59]">uart2_call_back</a> from init.o(i.uart2_call_back) referenced from init.o(i.main_com_init)
 <LI><a href="#[58]">uart5_call_back</a> from init.o(i.uart5_call_back) referenced from init.o(i.main_com_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(.text)
</UL>
<P><STRONG><a name="[1c1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPNanoSecond2SubSecond
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaledNanosecondsToInternalTime
</UL>

<P><STRONG><a name="[149]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[1c7]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_call_back
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_com_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_str_manage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_tod_msg_pack
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_msg_hanlde_packed
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[115]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
</UL>

<P><STRONG><a name="[cc]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_call_back
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CallBack
</UL>

<P><STRONG><a name="[10c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strstr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>

<P><STRONG><a name="[65]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJ_CallBack
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJ_CallBack
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJ_CallBack
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1cd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ce]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1d0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[71]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[73]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1d2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CTimer_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, timer.o(i.CTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CTimer_Init &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ETH_BSP_Config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4x7_eth_bsp.o(i.ETH_BSP_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ETH_BSP_Config &rArr; TIM_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_PHYITConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_EXTIConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[97]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>ETH_DMAITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[197]"></a>ETH_DMAPTPRxDescChainInit</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, stm32_eth.o(i.ETH_DMAPTPRxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ETH_DMAPTPRxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[196]"></a>ETH_DMAPTPTxDescChainInit</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32_eth.o(i.ETH_DMAPTPTxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMAPTPTxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[198]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMARxDescReceiveITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[af]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[199]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMATxDescChecksumInsertionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[88]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[a3]"></a>ETH_EnablePTPTimeStampAddend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_EnablePTPTimeStampAddend))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_AdjFreq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[95]"></a>ETH_EnablePTPTimeStampInterruptTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_EnablePTPTimeStampInterruptTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[ad]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[90]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetDMARxDescFrameLength))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[91]"></a>ETH_GetMACITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetMACITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>ETH_GetPTPFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetPTPFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_SetTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[a4]"></a>ETH_GetPTPRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetPTPRegister))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_GetTime
</UL>

<P><STRONG><a name="[8f]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetRxPktSize))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ETH_IRQHandler &rArr; LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_GetTime
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACClearITPendingBit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMACITStatus
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTargetTime
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EnablePTPTimeStampInterruptTrigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>ETH_Init</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, stm32_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[a8]"></a>ETH_InitializePTPTimeStamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_InitializePTPTimeStamp))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_SetTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[eb]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
</UL>

<P><STRONG><a name="[92]"></a>ETH_MACClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>ETH_MACITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[ae]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[ac]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[a0]"></a>ETH_PTPNanoSecond2SubSecond</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_PTPNanoSecond2SubSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_PTPNanoSecond2SubSecond &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_SetTime
</UL>

<P><STRONG><a name="[a5]"></a>ETH_PTPSubSecond2NanoSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernetif.o(i.ETH_PTPSubSecond2NanoSecond))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_GetTime
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTxPkt_ChainMode
</UL>

<P><STRONG><a name="[19b]"></a>ETH_PTPTimeStampCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_PTPTimeStampCmd))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[a1]"></a>ETH_PTPTime_AdjFreq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_PTPTime_AdjFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_PTPTime_AdjFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTimeStampAddend
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EnablePTPTimeStampAddend
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>

<P><STRONG><a name="[93]"></a>ETH_PTPTime_GetTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_PTPTime_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_PTPTime_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPSubSecond2NanoSecond
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPTPRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[a6]"></a>ETH_PTPTime_SetTime</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_PTPTime_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ETH_PTPTime_SetTime &rArr; ETH_PTPNanoSecond2SubSecond &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTimeStampUpdate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_InitializePTPTimeStamp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPTPFlagStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPNanoSecond2SubSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
</UL>

<P><STRONG><a name="[19d]"></a>ETH_PTPUpdateMethodConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_PTPUpdateMethodConfig))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[9b]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_PHYITConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[19c]"></a>ETH_SetPTPSubSecondIncrement</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SetPTPSubSecondIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[94]"></a>ETH_SetPTPTargetTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SetPTPTargetTime))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[a2]"></a>ETH_SetPTPTimeStampAddend</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SetPTPTimeStampAddend))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_AdjFreq
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[a7]"></a>ETH_SetPTPTimeStampUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SetPTPTimeStampUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_SetTime
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[9c]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[ab]"></a>ETH_Start</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[9e]"></a>ETH_StructInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[9a]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_PHYITConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[53]"></a>ETH_link_callback</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4x7_eth_bsp.o(i.ETH_link_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_link_callback &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpdStartup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_link_up
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[181]"></a>EUI48toEUI64</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bmc.o(i.EUI48toEUI64))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
</UL>

<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EXTI4_IRQHandler &rArr; Eth_Link_ITHandler &rArr; netif_set_link_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_EXTIConfig
</UL>

<P><STRONG><a name="[87]"></a>Eth_Link_EXTIConfig</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f4x7_eth_bsp.o(i.Eth_Link_EXTIConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Eth_Link_EXTIConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[b8]"></a>Eth_Link_ITHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4x7_eth_bsp.o(i.Eth_Link_ITHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Eth_Link_ITHandler &rArr; netif_set_link_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>Eth_Link_PHYITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4x7_eth_bsp.o(i.Eth_Link_PHYITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Eth_Link_PHYITConfig &rArr; ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[be]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e8]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[c0]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[e5]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[bf]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_EXTIConfig
</UL>

<P><STRONG><a name="[79]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_EXTIConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[120]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
</UL>

<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[c2]"></a>IWDG_Feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iwdg.o(i.IWDG_Feed))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CallBack
</UL>

<P><STRONG><a name="[c4]"></a>IWDG_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iwdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[c3]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[c6]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[c7]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[c5]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[ce]"></a>LED_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[d0]"></a>LwIP_Init</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, netconf.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LwIP_Init &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[d7]"></a>LwIP_Periodic_Handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LwIP_Periodic_Handle &rArr; etharp_tmr &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task
</UL>

<P><STRONG><a name="[96]"></a>LwIP_Pkt_Handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netconf.o(i.LwIP_Pkt_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>NMEA_Comma_Pos</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bds.o(i.NMEA_Comma_Pos))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOD_Analysis
</UL>

<P><STRONG><a name="[db]"></a>NMEA_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bds.o(i.NMEA_Pow))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num
</UL>

<P><STRONG><a name="[da]"></a>NMEA_Str2num</STRONG> (Thumb, 192 bytes, Stack size 36 bytes, bds.o(i.NMEA_Str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NMEA_Str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOD_Analysis
</UL>

<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_EXTIConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[83]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[dc]"></a>PTPd_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ptpd.o(i.PTPd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PTPd_Init &rArr; ptpdStartup &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpdStartup
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[dd]"></a>PTimer_Init</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, timer.o(i.PTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PTimer_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[89]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[77]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[78]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_EXTIConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[99]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[8d]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[8e]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_MCOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[8c]"></a>RCC_PLL3Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLL3Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[8b]"></a>RCC_PLL3Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLL3Config))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[e6]"></a>STMFLASH_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stmflash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[e4]"></a>STMFLASH_Write</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stmflash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
</UL>

<P><STRONG><a name="[e7]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>SecToTime</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, mktime.o(i.SecToTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SecToTime &rArr; calc_date_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_date_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_tod_msg_pack
</UL>

<P><STRONG><a name="[d3]"></a>Set_MAC_Address</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernetif.o(i.Set_MAC_Address))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM3_IRQHandler &rArr; getTime &rArr; ETH_PTPTime_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>TIM_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
</UL>

<P><STRONG><a name="[ee]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>TIM_ICInit</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
</UL>

<P><STRONG><a name="[7d]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
</UL>

<P><STRONG><a name="[f0]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1FastConfig))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[df]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectInputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
</UL>

<P><STRONG><a name="[e1]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
</UL>

<P><STRONG><a name="[e2]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
</UL>

<P><STRONG><a name="[f3]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f5]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f6]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f1]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[de]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
</UL>

<P><STRONG><a name="[f7]"></a>TOD_Analysis</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, bds.o(i.TOD_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TOD_Analysis &rArr; my_strstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strstr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Str2num
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMEA_Comma_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart1
</UL>

<P><STRONG><a name="[ec]"></a>Time_Update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[11e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
</UL>

<P><STRONG><a name="[fa]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[fd]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[fb]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
</UL>

<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d4]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[cb]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_call_back
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_tod_msg_pack
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CallBack
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1d5]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1d6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[103]"></a>addForeign</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, bmc.o(i.addForeign))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = addForeign &rArr; isSamePortIdentity &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
</UL>

<P><STRONG><a name="[106]"></a>addTime</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, arith.o(i.addTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addTime &rArr; normalizeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePeerDelay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[108]"></a>adjFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys_time.o(i.adjFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adjFreq &rArr; ETH_PTPTime_AdjFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_AdjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>

<P><STRONG><a name="[109]"></a>bmc</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bmc.o(i.bmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bmc &rArr; bmcStateDecision &rArr; s1 &rArr; isSamePortIdentity &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[10a]"></a>bmcDataSetComparison</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bmc.o(i.bmcDataSetComparison))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bmcDataSetComparison &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[10b]"></a>bmcStateDecision</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, bmc.o(i.bmcStateDecision))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bmcStateDecision &rArr; s1 &rArr; isSamePortIdentity &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[1ba]"></a>catchAlarm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_1.o(i.catchAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_Periodic_Handle
</UL>

<P><STRONG><a name="[110]"></a>cmd_handle_usart1</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cmd_handle.o(i.cmd_handle_usart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cmd_handle_usart1 &rArr; TOD_Analysis &rArr; my_strstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOD_Analysis
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_call_back
</UL>

<P><STRONG><a name="[113]"></a>cmd_handle_usart2</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cmd_handle.o(i.cmd_handle_usart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_handle_usart2
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_call_back
</UL>

<P><STRONG><a name="[114]"></a>cmd_handle_usart5</STRONG> (Thumb, 1414 bytes, Stack size 96 bytes, cmd_handle.o(i.cmd_handle_usart5))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_handle_usart5 &rArr; PTPd_Init &rArr; ptpdStartup &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpdStartup
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTPd_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_call_back
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_call_back
</UL>

<P><STRONG><a name="[118]"></a>com_init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usart.o(i.com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = com_init &rArr; usart4_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_com_init
</UL>

<P><STRONG><a name="[cd]"></a>com_send_str</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, usart.o(i.com_send_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = com_send_str
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_call_back
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_call_back
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_call_back
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_tod_msg_pack
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_msg_hanlde_packed
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CallBack
</UL>

<P><STRONG><a name="[10d]"></a>copyD0</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bmc.o(i.copyD0))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[121]"></a>div2Time</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, arith.o(i.div2Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = div2Time &rArr; normalizeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePeerDelay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
</UL>

<P><STRONG><a name="[122]"></a>doState</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, protocol.o(i.doState))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = doState &rArr; handle &rArr; handleSync &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackAnnounce
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_Periodic_Handle
</UL>

<P><STRONG><a name="[130]"></a>etharp_arp_input</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = etharp_arp_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[134]"></a>etharp_ip_input</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, etharp.o(i.etharp_ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = etharp_ip_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[55]"></a>etharp_output</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[138]"></a>etharp_query</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[13a]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[d8]"></a>etharp_tmr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = etharp_tmr &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[51]"></a>ethernet_input</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[52]"></a>ethernetif_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; ETH_DMAPTPRxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[d9]"></a>ethernetif_input</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>

<P><STRONG><a name="[1b8]"></a>fe5650a_cs_calc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rubidium.o(i.fe5650a_cs_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fe5650a_cs_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_msg_hanlde_packed
</UL>

<P><STRONG><a name="[1b6]"></a>floorLog2</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, arith.o(i.floorLog2))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order
</UL>

<P><STRONG><a name="[15a]"></a>fromInternalTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arith.o(i.fromInternalTime))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[148]"></a>getRand</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_time.o(i.getRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getRand
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
</UL>

<P><STRONG><a name="[ca]"></a>getTime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_time.o(i.getTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getTime &rArr; ETH_PTPTime_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CallBack
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
</UL>

<P><STRONG><a name="[b1]"></a>htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.htonl))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackPDelayRespFollowUp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackPDelayResp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackAnnounce
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayRespFollowUp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayResp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayReq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
</UL>

<P><STRONG><a name="[131]"></a>htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackPDelayRespFollowUp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackPDelayResp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackAnnounce
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayRespFollowUp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayResp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayReq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackAnnounce
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[16a]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[16c]"></a>icmp_input</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[172]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[175]"></a>igmp_delaying_member</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>

<P><STRONG><a name="[173]"></a>igmp_input</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[176]"></a>igmp_ip_output_if</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[178]"></a>igmp_joingroup</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[17b]"></a>igmp_leavegroup</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, igmp.o(i.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
</UL>

<P><STRONG><a name="[174]"></a>igmp_lookfor_group</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[179]"></a>igmp_lookup_group</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmp_lookup_group &rArr; igmp_lookfor_group
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[17c]"></a>igmp_remove_group</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, igmp.o(i.igmp_remove_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_remove_group
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[17d]"></a>igmp_report_groups</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_report_groups
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[17a]"></a>igmp_send</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[17e]"></a>igmp_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; igmp_lookfor_group
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[1a8]"></a>inet_aton</STRONG> (Thumb, 238 bytes, Stack size 36 bytes, inet.o(i.inet_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[170]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[16e]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[128]"></a>initClock</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, servo.o(i.initClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netEmptyEventQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[126]"></a>initData</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, bmc.o(i.initData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = initData
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUI48toEUI64
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[127]"></a>initTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_1.o(i.initTimer))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[136]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ip_addr.o(i.ip_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[182]"></a>ip_frag</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[141]"></a>ip_input</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ip_input &rArr; ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[171]"></a>ip_output</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[16f]"></a>ip_output_if</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[177]"></a>ip_output_if_opt</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, ip.o(i.ip_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[187]"></a>ip_reass</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[18a]"></a>ip_route</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[104]"></a>isSamePortIdentity</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bmc.o(i.isSamePortIdentity))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = isSamePortIdentity &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[10f]"></a>m1</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, bmc.o(i.m1))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = main &rArr; run_task &rArr; ptpd_Periodic_Handle &rArr; doState &rArr; handle &rArr; handleSync &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1a3]"></a>mem_free</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[d1]"></a>mem_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[142]"></a>mem_malloc</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1b7]"></a>mem_realloc</STRONG> (Thumb, 190 bytes, Stack size 36 bytes, mem.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[147]"></a>memp_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
</UL>

<P><STRONG><a name="[d2]"></a>memp_init</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[13e]"></a>memp_malloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memp.o(i.memp_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[112]"></a>mktime</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, timer.o(i.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart1
</UL>

<P><STRONG><a name="[12e]"></a>msgPackAnnounce</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, msg.o(i.msgPackAnnounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackAnnounce
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[191]"></a>msgPackDelayReq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msg.o(i.msgPackDelayReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackDelayReq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
</UL>

<P><STRONG><a name="[15b]"></a>msgPackDelayResp</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, msg.o(i.msgPackDelayResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msgPackDelayResp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[195]"></a>msgPackFollowUp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msg.o(i.msgPackFollowUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackFollowUp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
</UL>

<P><STRONG><a name="[129]"></a>msgPackHeader</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, msg.o(i.msgPackHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msgPackHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[12a]"></a>msgPackManagement</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, msg.o(i.msgPackManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackManagement
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[193]"></a>msgPackPDelayReq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, msg.o(i.msgPackPDelayReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackPDelayReq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
</UL>

<P><STRONG><a name="[162]"></a>msgPackPDelayResp</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msg.o(i.msgPackPDelayResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackPDelayResp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
</UL>

<P><STRONG><a name="[164]"></a>msgPackPDelayRespFollowUp</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, msg.o(i.msgPackPDelayRespFollowUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackPDelayRespFollowUp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
</UL>

<P><STRONG><a name="[194]"></a>msgPackSync</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, msg.o(i.msgPackSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgPackSync
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
</UL>

<P><STRONG><a name="[158]"></a>msgUnpackAnnounce</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, msg.o(i.msgUnpackAnnounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackAnnounce
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
</UL>

<P><STRONG><a name="[15c]"></a>msgUnpackDelayResp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msg.o(i.msgUnpackDelayResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackDelayResp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[160]"></a>msgUnpackFollowUp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, msg.o(i.msgUnpackFollowUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackFollowUp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[14d]"></a>msgUnpackHeader</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, msg.o(i.msgUnpackHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msgUnpackHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[156]"></a>msgUnpackManagement</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, msg.o(i.msgUnpackManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackManagement
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[166]"></a>msgUnpackPDelayResp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msg.o(i.msgUnpackPDelayResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackPDelayResp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
</UL>

<P><STRONG><a name="[168]"></a>msgUnpackPDelayRespFollowUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msg.o(i.msgUnpackPDelayRespFollowUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackPDelayRespFollowUp
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
</UL>

<P><STRONG><a name="[169]"></a>msgUnpackSync</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, msg.o(i.msgUnpackSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msgUnpackSync
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[f8]"></a>my_strstr</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bds.o(i.my_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = my_strstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOD_Analysis
</UL>

<P><STRONG><a name="[1bb]"></a>mystrncpy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(i.mystrncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mystrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_str_manage
</UL>

<P><STRONG><a name="[180]"></a>netEmptyEventQ</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net.o(i.netEmptyEventQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>

<P><STRONG><a name="[125]"></a>netInit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = netInit &rArr; igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[14b]"></a>netRecvEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(i.netRecvEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netRecvEvent &rArr; netRecv &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[14c]"></a>netRecvGeneral</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net.o(i.netRecvGeneral))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netRecvGeneral &rArr; netRecv &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[14a]"></a>netSelect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net.o(i.netSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_Periodic_Handle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[192]"></a>netSendEvent</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, net.o(i.netSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = netSendEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
</UL>

<P><STRONG><a name="[12b]"></a>netSendGeneral</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net.o(i.netSendGeneral))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = netSendGeneral &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[163]"></a>netSendPeerEvent</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, net.o(i.netSendPeerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
</UL>

<P><STRONG><a name="[165]"></a>netSendPeerGeneral</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, net.o(i.netSendPeerGeneral))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = netSendPeerGeneral &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
</UL>

<P><STRONG><a name="[124]"></a>netShutdown</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, net.o(i.netShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = netShutdown &rArr; igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[d4]"></a>netif_add</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netif_add &rArr; igmp_start &rArr; igmp_lookup_group &rArr; igmp_lookfor_group
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[b0]"></a>netif_is_link_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_is_link_up))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
</UL>

<P><STRONG><a name="[186]"></a>netif_is_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_is_up))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>

<P><STRONG><a name="[b3]"></a>netif_set_addr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[d5]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[b6]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
</UL>

<P><STRONG><a name="[1b5]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1b3]"></a>netif_set_ipaddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[d6]"></a>netif_set_link_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[bd]"></a>netif_set_link_down</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[bc]"></a>netif_set_link_up</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = netif_set_link_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[1b4]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[b5]"></a>netif_set_up</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[107]"></a>normalizeTime</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, arith.o(i.normalizeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div2Time
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>

<P><STRONG><a name="[117]"></a>ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[16d]"></a>ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(i.ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[13b]"></a>pbuf_alloc</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[18e]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[185]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[18b]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[13c]"></a>pbuf_copy</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[183]"></a>pbuf_copy_partial</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[133]"></a>pbuf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netEmptyEventQ
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneralCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEventCallback
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecv
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[135]"></a>pbuf_header</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[184]"></a>pbuf_realloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pbuf_realloc &rArr; mem_realloc
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[13d]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[1b0]"></a>pbuf_take</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_take
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
</UL>

<P><STRONG><a name="[b4]"></a>ptpdStartup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, startup.o(i.ptpdStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ptpdStartup &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTPd_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1b9]"></a>ptpd_Periodic_Handle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ptpd.o(i.ptpd_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = ptpd_Periodic_Handle &rArr; doState &rArr; handle &rArr; handleSync &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catchAlarm
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_task
</UL>

<P><STRONG><a name="[188]"></a>raw_input</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[fc]"></a>receive_str_manage</STRONG> (Thumb, 362 bytes, Stack size 1064 bytes, usart.o(i.receive_str_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = receive_str_manage &rArr; mystrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrncpy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CallBack
</UL>

<P><STRONG><a name="[1a1]"></a>run_task</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, task.o(i.run_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = run_task &rArr; ptpd_Periodic_Handle &rArr; doState &rArr; handle &rArr; handleSync &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_Periodic_Handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>s1</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bmc.o(i.s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = s1 &rArr; isSamePortIdentity &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[15e]"></a>scaledNanosecondsToInternalTime</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arith.o(i.scaledNanosecondsToInternalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scaledNanosecondsToInternalTime &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[1a0]"></a>setTime</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sys_time.o(i.setTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setTime &rArr; ETH_PTPTime_SetTime &rArr; ETH_PTPNanoSecond2SubSecond &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTime_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>subTime</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, arith.o(i.subTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = subTime &rArr; normalizeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJ_CallBack
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePeerDelay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[19f]"></a>system_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, init.o(i.system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = system_init &rArr; LwIP_Init &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpdStartup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTimer_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTPd_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTargetTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACITConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EnablePTPTimeStampInterruptTrigger
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTimer_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>timerExpired</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, timer_1.o(i.timerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = timerExpired &rArr; timerUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
</UL>

<P><STRONG><a name="[159]"></a>timerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer_1.o(i.timerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
</UL>

<P><STRONG><a name="[1bd]"></a>timerStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_1.o(i.timerStop))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1bc]"></a>timerUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer_1.o(i.timerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
</UL>

<P><STRONG><a name="[15d]"></a>toInternalTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, arith.o(i.toInternalTime))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[b2]"></a>toState</STRONG> (Thumb, 610 bytes, Stack size 32 bytes, protocol.o(i.toState))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_link_callback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpdStartup
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1aa]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1b2]"></a>udp_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
</UL>

<P><STRONG><a name="[189]"></a>udp_input</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1a6]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1a9]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1ab]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1b1]"></a>udp_sendto</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSend
</UL>

<P><STRONG><a name="[1be]"></a>udp_sendto_if</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[75]"></a>updateClock</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, servo.o(i.updateClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = updateClock &rArr; setTime &rArr; ETH_PTPTime_SetTime &rArr; ETH_PTPNanoSecond2SubSecond &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJ_CallBack
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[15f]"></a>updateDelay</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, servo.o(i.updateDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updateDelay &rArr; subTime &rArr; normalizeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div2Time
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[161]"></a>updateOffset</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, servo.o(i.updateOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updateOffset &rArr; subTime &rArr; normalizeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[167]"></a>updatePeerDelay</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, servo.o(i.updatePeerDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = updatePeerDelay &rArr; subTime &rArr; normalizeTime
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div2Time
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3]"></a>ADJ_CallBack</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, task.o(i.ADJ_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADJ_CallBack &rArr; updateClock &rArr; setTime &rArr; ETH_PTPTime_SetTime &rArr; ETH_PTPNanoSecond2SubSecond &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>DS1302_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(i.DS1302_CallBack))
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>KEY_CallBack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, task.o(i.KEY_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = KEY_CallBack &rArr; ptp_msg_hanlde_packed &rArr; com_send_str
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_msg_hanlde_packed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>LED_CallBack</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, task.o(i.LED_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_CallBack &rArr; com_send_str
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>RunStateLock_CallBack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(i.RunStateLock_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RunStateLock_CallBack &rArr; ptp_tod_msg_pack &rArr; SecToTime &rArr; calc_date_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_tod_msg_pack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>UDBG_CallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(i.UDBG_CallBack))
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USART_CallBack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task.o(i.USART_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = USART_CallBack &rArr; receive_str_manage &rArr; mystrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_str_manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>ptp_msg_hanlde_packed</STRONG> (Thumb, 136 bytes, Stack size 280 bytes, task.o(i.ptp_msg_hanlde_packed))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ptp_msg_hanlde_packed &rArr; com_send_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fe5650a_cs_calc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_CallBack
</UL>

<P><STRONG><a name="[e3]"></a>ptp_tod_msg_pack</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, task.o(i.ptp_tod_msg_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ptp_tod_msg_pack &rArr; SecToTime &rArr; calc_date_time
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecToTime
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStateLock_CallBack
</UL>

<P><STRONG><a name="[1a2]"></a>main_com_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, init.o(i.main_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = main_com_init &rArr; com_init &rArr; usart4_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[57]"></a>uart1_call_back</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init.o(i.uart1_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart1_call_back &rArr; cmd_handle_usart1 &rArr; TOD_Analysis &rArr; my_strstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.main_com_init)
</UL>
<P><STRONG><a name="[59]"></a>uart2_call_back</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init.o(i.uart2_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = uart2_call_back &rArr; cmd_handle_usart5 &rArr; PTPd_Init &rArr; ptpdStartup &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.main_com_init)
</UL>
<P><STRONG><a name="[58]"></a>uart5_call_back</STRONG> (Thumb, 70 bytes, Stack size 112 bytes, init.o(i.uart5_call_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = uart5_call_back &rArr; cmd_handle_usart5 &rArr; PTPd_Init &rArr; ptpdStartup &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_handle_usart5
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_str
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.main_com_init)
</UL>
<P><STRONG><a name="[ed]"></a>SetSysClockTo72</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[82]"></a>ETH_GPIO_Config</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, stm32f4x7_eth_bsp.o(i.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETH_GPIO_Config &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL3Config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL3Cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCOConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ETH_MediaInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[84]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f4x7_eth_bsp.o(i.ETH_MACDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[ef]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4x7_eth_bsp.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[85]"></a>TIM_Configuration</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, stm32f4x7_eth_bsp.o(i.TIM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TIM_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[11a]"></a>usart1_init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, usart.o(i.usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[11b]"></a>usart2_init</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, usart.o(i.usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[11c]"></a>usart3_init</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, usart.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[119]"></a>usart4_init</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, usart.o(i.usart4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart4_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[11d]"></a>usart5_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, usart.o(i.usart5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart5_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[ea]"></a>calc_date_time</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, mktime.o(i.calc_date_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calc_date_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecToTime
</UL>

<P><STRONG><a name="[19e]"></a>ETH_PTPRxPkt_ChainMode</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, ethernetif.o(i.ETH_PTPRxPkt_ChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_PTPRxPkt_ChainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[aa]"></a>ETH_PTPTxPkt_ChainMode</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, ethernetif.o(i.ETH_PTPTxPkt_ChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_PTPTxPkt_ChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPSubSecond2NanoSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[143]"></a>low_level_init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = low_level_init &rArr; ETH_DMAPTPRxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACITConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTimeStampUpdate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTimeStampAddend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPSubSecondIncrement
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPUpdateMethodConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTimeStampCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_InitializePTPTimeStamp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPTPFlagStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EnablePTPTimeStampAddend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChecksumInsertionConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPTPTxDescChainInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPTPRxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[144]"></a>low_level_input</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPSubSecond2NanoSecond
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPRxPkt_ChainMode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[56]"></a>low_level_output</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = low_level_output &rArr; ETH_PTPTxPkt_ChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTxPkt_ChainMode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[1a4]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[13f]"></a>etharp_raw</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[137]"></a>etharp_send_ip</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[139]"></a>find_entry</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, etharp.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[140]"></a>free_etharp_q</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[132]"></a>update_arp_entry</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, etharp.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[16b]"></a>icmp_send_response</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[17f]"></a>lwip_standard_chksum</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[18d]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[18f]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_reass_dequeue_datagram
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[190]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[18c]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[12c]"></a>handle</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, protocol.o(i.handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = handle &rArr; handleSync &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptp_unpack_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayRespFollowUp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayResp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePDelayReq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAnnounce
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[14e]"></a>handleAnnounce</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, protocol.o(i.handleAnnounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = handleAnnounce &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackAnnounce
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[151]"></a>handleDelayReq</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, protocol.o(i.handleDelayReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = handleDelayReq &rArr; netSendGeneral &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[153]"></a>handleDelayResp</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, protocol.o(i.handleDelayResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = handleDelayResp &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaledNanosecondsToInternalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[150]"></a>handleFollowUp</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, protocol.o(i.handleFollowUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = handleFollowUp &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaledNanosecondsToInternalTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[152]"></a>handlePDelayReq</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, protocol.o(i.handlePDelayReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = handlePDelayReq &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendPeerGeneral
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendPeerEvent
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayRespFollowUp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayResp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[154]"></a>handlePDelayResp</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, protocol.o(i.handlePDelayResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = handlePDelayResp &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePeerDelay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackPDelayResp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaledNanosecondsToInternalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[155]"></a>handlePDelayRespFollowUp</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, protocol.o(i.handlePDelayRespFollowUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = handlePDelayRespFollowUp &rArr; toState &rArr; initClock &rArr; netEmptyEventQ &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePeerDelay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackPDelayRespFollowUp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaledNanosecondsToInternalTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[14f]"></a>handleSync</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, protocol.o(i.handleSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = handleSync &rArr; issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReqTimerExpired
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamePortIdentity
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scaledNanosecondsToInternalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[12f]"></a>issueDelayReqTimerExpired</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, protocol.o(i.issueDelayReqTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = issueDelayReqTimerExpired &rArr; netSendPeerEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendPeerEvent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackPDelayReq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[12d]"></a>issueSync</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, protocol.o(i.issueSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = issueSync &rArr; netSendEvent &rArr; netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[157]"></a>ptp_unpack_control</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, protocol.o(i.ptp_unpack_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ptp_unpack_control
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1ae]"></a>netQCheck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net.o(i.netQCheck))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
</UL>

<P><STRONG><a name="[1a5]"></a>netQGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net.o(i.netQGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netEmptyEventQ
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecv
</UL>

<P><STRONG><a name="[1a7]"></a>netQInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net.o(i.netQInit))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1ad]"></a>netQPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, net.o(i.netQPut))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneralCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEventCallback
</UL>

<P><STRONG><a name="[1ac]"></a>netRecv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, net.o(i.netRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = netRecv &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
</UL>

<P><STRONG><a name="[5a]"></a>netRecvEventCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net.o(i.netRecvEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netRecvEventCallback &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[5b]"></a>netRecvGeneralCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net.o(i.netRecvGeneralCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netRecvGeneralCallback &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[1af]"></a>netSend</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, net.o(i.netSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = netSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendPeerGeneral
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendPeerEvent
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[145]"></a>filter</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, servo.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = filter
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePeerDelay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
</UL>

<P><STRONG><a name="[146]"></a>order</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, servo.o(i.order))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorLog2
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[f2]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f4]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ff]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[102]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
